* Docstrings

- Special type of strings delineated by three double quotes at start and end
- Allows linebreaks within strings
- Picked up by built in help facility if they immediately follow the definition of a function

* String formatting

** Dumb way

- Use ~str(variable_identifier)~ to stringify something
- Then use ~print('some text ' + str(variable) + ' more text.')~

** Better: string formatting

- There are two styles
- Old-style uses C format codes, e.g. ~print('%s is awesome!'%('Python'))~
- New style uses {}, e.g. ~print('{} is awesome!'.format('Python'))~
- Can use format codes beginning with colons, e.g. ~{:d}~ is integer, ~{:.2f}~ is 2dp float
- Can also use named parameters e.g. ~print('{lang:s} is awesome!'.format(lang='Python'))~

* None type
- Null is its own type ~None~
- ~False != None~
- Test for None-ness using ~is~ keyword
- Variable must still be defined to be ~None~

* Booleans

- ~1 == True~ and ~0 == False~
- But ~2 != True~ and ~-1 != False~
- Also, ~True - 1 == False~ and ~False - 1 == -1~
- But ~0 is False == False~ - ~is~ tests for /exact/ equivalence
- ~if x~ tests for any nonzero value, i.e. it is different from ~if x == True~
